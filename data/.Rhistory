# different composition in each question
input1 <- tagPOS(Q1)
input2 <- tagPOS(Q2)
print(table(input1$POStags))
print(table(input2$POStags))
gc(reset = TRUE)}
{Q1 <- T1$question1[i]
Q2 <- T1$question2[i]
# different composition in each question
input1 <- tagPOS(Q1)
input2 <- tagPOS(Q2)
print(table(input1$POStags))
print(table(input2$POStags))
gc(reset = TRUE)}
Q1 <- T1$question1[i]
Q2 <- T1$question2[i]
input1 <- tagPOS(Q1)
input2 <- tagPOS(Q2)
input1
Q1
a <- c(T1$question1[1:100], T1$question2[1:100])
a1 <- tagPOS(a)
table(a1$POStags)
i=9
Q1 <- T1$question1[i]
Q2 <- T1$question2[i]
q1
Q1
Q2
input1 <- tagPOS(Q1)
input2 <- tagPOS(Q2)
input1
input2
composition <- c("CC", "CD", "DT", "EX", "FW", "IN", "JJ", "JJR", "JJS", "LS", "MD", "NN", "NNS", "NNP"
, "NNPS", "PDT", "POS", "PRP", "PRP$", "RB", "RBR", "RBS", "RP", "SYM", "TO", "UH", "VB"
, "VBD", "VBG", "VBN", "VBP", "VBZ", "WDT","WP","WP$","WRB", ".", "-LRB-", "-RRB-", ","
, ":", "''", "``")
L <- length(composition)
find_loc <- function(input) {
output <- rep(0, L)
for (i in 1:length(input)) {
index <- which(composition == names(input)[i])
output[index] <- input[i] / sum(input)
}
return(output)
}
find_loc(input1)
find_loc <- function(input) {
output <- rep(0, L)
for (i in 1:length(input$POStags)) {
index <- which(composition == names(input$POStags)[i])
output[index] <- input[i]
}
return(output)
}
find_loc(input1)
find_loc <- function(input) {
output <- rep(0, L)
for (i in 1:length(input$POStags)) {
index <- which(composition == names(input$POStags)[i])
output[index] <- input$POStags[i]
}
return(output)
}
find_loc(input1)
i=1
index <- which(composition == names(input$POStags)[i])
index <- which(composition == names(input1$POStags)[i])
index
names(input1$POStags)
index <- which(composition == input1$POStags[i])
index
find_loc <- function(input) {
output <- rep(0, L)
for (i in 1:length(input$POStags)) {
index <- which(composition == input1$POStags[i])
output[index] <- input$POStags[i]
}
return(output)
}
find_loc(input1)
find_loc <- function(input) {
output <- rep(0, L)
for (i in 1:length(input$POStags)) {
index <- which(composition == names(input1$POStags)[i])
output[index] <- input$POStags[i]
}
return(output)
}
find_loc(table(input1))
a <- table(input1)
input1
a <- table(input1$POStags)
find_loc(a)
find_loc <- function(input) {
output <- rep(0, L)
#  x <- table(input$POStags)
for (i in 1:length(input$POStags)) {
index <- which(composition == names(input$POStags)[i])
output[index] <- input$POStags[i]
}
return(output)
}
find_loc(input1)
find_loc <- function(input) {
output <- rep(0, L)
#  x <- table(input$POStags)
for (i in 1:length(input$POStags)) {
index <- which(composition == names(table(input$POStags))[i])
output[index] <- input$POStags[i]
}
return(output)
}
find_loc(input1)
find_loc <- function(input) {
output <- rep(0, L)
#  x <- table(input$POStags)
for (i in 1:length(input$POStags)) {
index <- which(composition == names(input$POStags)[i])
output[index] <- table(input$POStags)[i]
}
return(output)
}
find_loc(input1)
input = input1
input1
length(input$POStags)
length(table(input$POStags))
find_loc <- function(input) {
output <- rep(0, L)
for (i in 1:length(input)) {
index <- which(composition == names(input)[i])
output[index] <- input[i]
}
return(output)
}
find_loc(table(input1))
find_loc(table(input1$POStags))
find_loc <- function(input) {
input <- table(input$POStags)
output <- rep(0, L)
for (i in 1:length(input)) {
index <- which(composition == names(input)[i])
output[index] <- input[i]
}
return(output)
}
f <- function(input) {
# input two questions
Q1 <- input$question1
Q2 <- input$question1
# different composition in each question
input1 <- tagPOS(Q1)
input2 <- tagPOS(Q2)
table(input1$POStags)
table(input2$POStags)
}
f(T1[1,])
for(i in 1:10)
{
Q1 <- T1$question1[i]
Q2 <- T1$question2[i]
# different composition in each question
input1 <- tagPOS(Q1)
input2 <- tagPOS(Q2)
print(i)
print(table(input1$POStags))
print(table(input2$POStags))
gc(reset = TRUE)
}
for(i in 1:10)
{
Q1 <- T1$question1[i]
Q2 <- T1$question2[i]
# different composition in each question
input1 <- tagPOS(Q1)
input2 <- tagPOS(Q2)
print(i)
print(T1$is_duplicate)
print(table(input1$POStags))
print(table(input2$POStags))
gc(reset = TRUE)
}
for(i in 1:10)
{
Q1 <- T1$question1[i]
Q2 <- T1$question2[i]
# different composition in each question
input1 <- tagPOS(Q1)
input2 <- tagPOS(Q2)
print(i)
print(T1$is_duplicate[i])
print(table(input1$POStags))
print(table(input2$POStags))
gc(reset = TRUE)
}
i=6
Q1 <- T1$question1[i]
Q2 <- T1$question2[i]
input1 <- tagPOS(Q1)
input2 <- tagPOS(Q2)
input1$POStags
input2$POStags
input1
input2
Q1
Q2
Q1TV <- v_n(input1, "VB")
Q1TN <- v_n(input1, "NN")
Q2TV <- v_n(input2, "VB")
Q2TN <- v_n(input2, "NN")
Q1TV
Q2Tv
Q2TV
Q1TN
Q2TN
Q1TN %in% Q2TN
length(dic1) > length(dic2)
Q1 <- T1$question1[i]
Q2 <- T1$question2[i]
L1 <- length(unlist(strsplit(Q1, " ")))
L2 <- length(unlist(strsplit(Q2, " ")))
ratio <- min(c(L1, L2)) / max(c(L1, L2))
dic1 <- rem_eng(Q1)
dic2 <- rem_eng(Q2)
L.rem1 <- length(dic1)
L.rem2 <- length(dic2)
length(dic1) > length(dic2)
len <- length(dic1) + length(dic2) - sum(dic1 %in% dic2)
len
same <- sum(dic1 %in% dic2)/len
same
if (length(dic1) < length(dic2)) {Q <- dic1; dic1 <- dic2; dic2 <- Q}
len <- length(dic1) + length(dic2) - sum(dic1 %in% dic2)
len
same <- sum(dic1 %in% dic2)/len
same
f <- function(i) {
# input two questions
Q1 <- T1$question1[i]
Q2 <- T1$question2[i]
# number of words in each question
L1 <- length(unlist(strsplit(Q1, " ")))
L2 <- length(unlist(strsplit(Q2, " ")))
# ratio of length
ratio <- min(c(L1, L2)) / max(c(L1, L2))
# remove punctuation and stopwords
dic1 <- rem_eng(Q1)
dic2 <- rem_eng(Q2)
L.rem1 <- length(dic1)
L.rem2 <- length(dic2)
# percentage of same words between two questions
#if (L.rem1 < L.rem2) {Q <- dic1; dic1 <- dic2; dic2 <- Q}
len <- L.rem1 + L.rem2 - sum(dic1 %in% dic2)
same <- sum(dic1 %in% dic2)/len
# extract verb and noun in each question
# Q1Tag <- tagPOS(Q1)
# Q2Tag <- tagPOS(Q2)
# v_n.result <- v_n.length(Q1Tag, Q2Tag)
input1 <- tagPOS(Q1)
input2 <- tagPOS(Q2)
Q1TV <- v_n(input1, "VB")
Q1TN <- v_n(input1, "NN")
Q2TV <- v_n(input2, "VB")
Q2TN <- v_n(input2, "NN")
# original number of verb and noun
LV1 <- length(Q1TV)
LV2 <- length(Q2TV)
LN1 <- length(Q1TN)
LN2 <- length(Q2TN)
Q1TV <- rem_eng(Q1TV)
Q2TV <- rem_eng(Q2TV)
Q1TN <- rem_eng(Q1TN)
Q2TN <- rem_eng(Q2TN)
# number of verb and noun after remove stopwords
LV.rem1 <- length(Q1TV)
LV.rem2 <- length(Q2TV)
LN.rem1 <- length(Q1TN)
LN.rem2 <- length(Q2TN)
#if (LV.rem1 > LV.rem2) {Q <- Q1TV; Q1TV <- Q2TV; Q2TV <- Q}
#if (LN.rem1 > LN.rem2) {Q <- Q1TN; Q1TN <- Q2TN; Q2TN <- Q}
# percentage of same verb and noun between two questions
len.V <- LV.rem1 + LV.rem2 - sum(Q1TV %in% Q2TV)
same.V <- sum(Q1TV %in% Q2TV)/len.V
len.N <- LN.rem1 + LN.rem2 - sum(Q1TN %in% Q2TN)
same.N <- sum(Q1TN %in% Q2TN)/len.N
output <- c(LV1, LV2, LN1, LN2, LV.rem1, LV.rem2, LN.rem1, LN.rem2, same.V, same.N)
output[is.na(output) == T] <- 0
return(c(L1, L2, L.rem1, L.rem2, same, ratio, output))
}
f(!)
f(1)
f(2)
gc(reset = TRUE)
f(2)
gc(reset = TRUE)
f(3)
gc(reset = TRUE)
f(4)
f(4) == feature[4,]
feature[4,]
find_loc <- function(input) {
input <- table(input$POStags)
output <- rep(0, L)
for (i in 1:length(input)) {
index <- which(composition == names(input)[i])
output[index] <- input[i]
}
return(output)
}
find_loc(T1[1,])
find_loc(imput1)
find_loc(input1)
f
feature[25000,] <- f(25000)
write.csv(feature, file = "feature.csv")
input1
Q=1
input <- T1[1,]
input
com <- function(input, Q) {
# input two questions
Ques <- ifesle(Q==1, input$question1, input$question2)
# different composition in each question
input <- tagPOS(Ques)
output <- find_loc(input)
return(output)
}
com(feature[1,],1)
com <- function(input, Q) {
# input two questions
Ques <- ifelse(Q==1, input$question1, input$question2)
# different composition in each question
input <- tagPOS(Ques)
output <- find_loc(input)
return(output)
}
com(feature[1,],1)
ifelse(Q==1, input$question1, input$question2)
Ques <- ifelse(Q==1, input$question1, input$question2)
input <- tagPOS(Ques)
output <- find_loc(input)
output
tagPOS(Ques)
com <- function(input, Q) {
# input two questions
Ques <- ifelse(Q==1, input$question1, input$question2)
# different composition in each question
input <- tagPOS(Ques)
output <- find_loc(input)
return(output)
}
com(feature[1,],1)
input
input <- feature[1,]
Q
Ques <- ifelse(Q==1, input$question1, input$question2)
com(T1[1,], 1)
com(T1[1,], 2)
system.time(com(T1[1,]1))
system.time(com(T1[1,],1))
com <- function(input, Q) {
# input two questions
Ques <- ifelse(Q==1, input$question1, input$question2)
# different composition in each question
Questag <- tagPOS(Ques)
output <- find_loc(Questag)
return(output)
gc(reset = TRUE)
}
com(T1[1,]1)
com(T1[1,],1)
com.Q1 <- apply(T1, 1, com, 1)
mode(T1)
head(T1)
head(as.matrix(T1))
com.Q1 <- apply(as.matrix(T1), 1, com, 1)
com <- function(input, Q) {
# input two questions
Ques <- ifelse(Q==1, input[4], input[5])
# different composition in each question
Questag <- tagPOS(Ques)
output <- find_loc(Questag)
return(output)
gc(reset = TRUE)
}
com.Q1 <- apply(as.matrix(T1), 1, com, 1)
com.Q1 <- matrix(NA, nrow = S, ncol = L)
.638*50000*2/60/60
com.Q1
com.diff <- function(input) {
# different composition in each question
Q1 <- tagPOS(input$question1)
Q2 <- tagPOS(input$question2)
Q1 <- find_loc(Q1)
Q2 <- find_loc(Q2)
output <- abs(Q1-Q2)
return(output)
}
com.diff(T1[1,])
com.diff(T1[2,])
com.diff(T1[3,])
gc(reset = TRUE)
com.diff(T1[3,])
gc(reset = TRUE)
system.time(com.diff(T1[4,]))
1.238*5000/60/60
com.Q1 <- matrix(NA, nrow = S, ncol = L)
com.Q1 <- matrix(NA, nrow = S, ncol = L)
com.Q2 <- matrix(NA, nrow = S, ncol = L)
View(com.Q1)
View(com.Q2)
for(i in 1: 10000) {
com.Q1[i, ] <- com(T1[i, ], 1)
com.Q1[i, ] <- com(T1[i, ], 2)
gc(reset = TRUE)
}
com.Q1 <- matrix(NA, nrow = S, ncol = L)
com.Q2 <- matrix(NA, nrow = S, ncol = L)
for(i in 1: 10000) {
com.Q1[i, ] <- com(T1[i, ], 1)
com.Q2[i, ] <- com(T1[i, ], 2)
gc(reset = TRUE)
}
for(i in 10001: 35000) {
com.Q1[i, ] <- com(T1[i, ], 1)
com.Q2[i, ] <- com(T1[i, ], 2)
gc(reset = TRUE)
}
write.csv(com.Q1, file = "parsing.Q1.csv")
write.csv(com.Q2, file = "parsing.Q2.csv")
for(i in 35001: 40000) {
com.Q1[i, ] <- com(T1[i, ], 1)
com.Q2[i, ] <- com(T1[i, ], 2)
gc(reset = TRUE)
}
for(i in 40001: 41000) {
com.Q1[i, ] <- com(T1[i, ], 1)
com.Q2[i, ] <- com(T1[i, ], 2)
gc(reset = TRUE)
}
for(i in 41001: 42000) {
com.Q1[i, ] <- com(T1[i, ], 1)
com.Q2[i, ] <- com(T1[i, ], 2)
gc(reset = TRUE)
}
com.Q1[i, ] <- com(T1[i, ], 1)
com.Q2[i, ] <- com(T1[i, ], 2)
gc(reset = TRUE)
}
com.Q2[i, ] <- com(T1[i, ], 2)
gc(reset = TRUE)
}
gc(reset = TRUE)
}
}
com.Q1[41000,]
com.Q1[41001,]
com.Q1[41002,]
com.Q1[42000,]
com.Q1[42001,]
for(i in 4200: 43000) {
com.Q1[i, ] <- com(T1[i, ], 1)
com.Q2[i, ] <- com(T2[i, ], 2)
gc(reset = TRUE)
}
com <- function(input, Q) {
# input two questions
Ques <- ifelse(Q==1, input$question1, input$question2)
# different composition in each question
Questag <- tagPOS(Ques)
output <- find_loc(Questag)
return(output)
}
i=42001
com([T1[i,]],1)
com(T1[i,],1)
com(T1[i,],2)
for(i in 42001: 43000) {
com.Q1[i, ] <- com(T1[i, ], 1)
com.Q2[i, ] <- com(T2[i, ], 2)
gc(reset = TRUE)
}
for(i in 42001: 43000) {
com.Q1[i, ] <- com(T1[i, ], 1)
com.Q2[i, ] <- com(T1[i, ], 2)
gc(reset = TRUE)
}
for(i in 43001: 44000) {
com.Q1[i, ] <- com(T1[i, ], 1)
com.Q2[i, ] <- com(T1[i, ], 2)
gc(reset = TRUE)
}
for(i in 44001: 45000) {
com.Q1[i, ] <- com(T1[i, ], 1)
com.Q2[i, ] <- com(T1[i, ], 2)
gc(reset = TRUE)
}
for(i in 45001: 46500) {
com.Q1[i, ] <- com(T1[i, ], 1)
com.Q2[i, ] <- com(T1[i, ], 2)
gc(reset = TRUE)
}
for(i in 46501: 50000) {
com.Q1[i, ] <- com(T1[i, ], 1)
com.Q2[i, ] <- com(T1[i, ], 2)
gc(reset = TRUE)
}
write.csv(com.Q1, file = "parsing.Q1.csv")
write.csv(com.Q2, file = "parsing.Q2.csv")
install.packages("MASS")
library(MASS)
