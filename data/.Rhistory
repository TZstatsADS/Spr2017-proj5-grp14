dic2 <- rem_eng(Q2)
if (length(dic1) < length(dic2)) {Q <- dic1; dic1 <- dic2; dic2 <- Q}
same <- sum(dic1 %in% dic2)/length(dic1)
same
Q1
Q2
dic1
dic2
len <- length(dic1) + length(dic2) - sum(dic1 %in% dic2)
same <- sum(dic1 %in% dic2)/
return(same)
Q1 <- T1$question1[i]
Q2 <- T1$question2[i]
dic1 <- rem_eng(Q1)
dic2 <- rem_eng(Q2)
if (length(dic1) < length(dic2)) {Q <- dic1; dic1 <- dic2; dic2 <- Q}
len <- length(dic1) + length(dic2) - sum(dic1 %in% dic2)
same <- sum(dic1 %in% dic2)/len
same
f <- function(i) {
Q1 <- T1$question1[i]
Q2 <- T1$question2[i]
dic1 <- rem_eng(Q1)
dic2 <- rem_eng(Q2)
if (length(dic1) < length(dic2)) {Q <- dic1; dic1 <- dic2; dic2 <- Q}
len <- length(dic1) + length(dic2) - sum(dic1 %in% dic2)
same <- sum(dic1 %in% dic2)/len
return(same)
}
T1$same <- apply(as.matrix(c(1:10000)), 1, f)
T1$s2 <- round(T1$same, 1)
table(T1$is_duplicate, T1$s2)
i
i=1
Q1 <- T1$question1[i]
Q2 <- T1$question2[i]
dic1 <- rem_eng(Q1)
dic2 <- rem_eng(Q2)
if (length(dic1) < length(dic2)) {Q <- dic1; dic1 <- dic2; dic2 <- Q}
dic1
dic2
len <- length(dic1) + length(dic2) - sum(dic1 %in% dic2)
len
sum(dic1 %in% dic2)
same <- sum(dic1 %in% dic2)/len
same
i=2
Q1 <- T1$question1[i]
Q2 <- T1$question2[i]
dic1 <- rem_eng(Q1)
dic2 <- rem_eng(Q2)
if (length(dic1) < length(dic2)) {Q <- dic1; dic1 <- dic2; dic2 <- Q}
dic1
dic2
len <- length(dic1) + length(dic2) - sum(dic1 %in% dic2)
len
same <- sum(dic1 %in% dic2)/len
same
sum(dic1 %in% dic2)
length(dic1) + length(dic2)
sum(dic1 %in% dic2)
i=3
Q1 <- T1$question1[i]
Q2 <- T1$question2[i]
dic1 <- rem_eng(Q1)
dic2 <- rem_eng(Q2)
if (length(dic1) < length(dic2)) {Q <- dic1; dic1 <- dic2; dic2 <- Q}
len <- length(dic1) + length(dic2) - sum(dic1 %in% dic2)
same <- sum(dic1 %in% dic2)/len
dic1
dic2
len
same <- sum(dic1 %in% dic2)/len
sa,e
same
f <- function(i) {
Q1 <- T1$question1[i]
Q2 <- T1$question2[i]
dic1 <- rem_eng(Q1)
dic2 <- rem_eng(Q2)
#if (length(dic1) < length(dic2)) {Q <- dic1; dic1 <- dic2; dic2 <- Q}
len <- length(dic1) + length(dic2) - sum(dic1 %in% dic2)
same <- sum(dic1 %in% dic2)/len
return(same)
}
T1$same <- apply(as.matrix(c(1:10000)), 1, f)
T1$s2 <- round(T1$same, 1)
table(T1$is_duplicate, T1$s2)
View(T1)
i=360
Q1 <- T1$question1[i]
Q2 <- T1$question2[i]
dic1 <- rem_eng(Q1)
dic2 <- rem_eng(Q2)
len <- length(dic1) + length(dic2) - sum(dic1 %in% dic2)
same <- sum(dic1 %in% dic2)/len
same
Q1
Q2
dic1
dic2
len
f <- function(i) {
Q1 <- T1$question1[i]
Q2 <- T1$question2[i]
dic1 <- rem_eng(Q1)
dic2 <- rem_eng(Q2)
if (length(dic1) > length(dic2)) {Q <- dic1; dic1 <- dic2; dic2 <- Q}
len <- length(dic1) + length(dic2) - sum(dic1 %in% dic2)
same <- sum(dic1 %in% dic2)/len
return(same)
}
T1$same <- apply(as.matrix(c(1:10000)), 1, f)
T1$s2 <- round(T1$same, 1)
table(T1$is_duplicate, T1$s2)
S <- 50000
index <- 1:S
T1 <- train[index, ] # may need to change name
i
Q1
Q2
length(strsplit(Q1, " "))
strsplit(Q1, " ")
length(unlist(strsplit(Q1, " ")))
f <- function(i) {
Q1 <- T1$question1[i]
Q2 <- T1$question2[i]
L1 <- length(unlist(strsplit(Q1, " ")))
L2 <- length(unlist(strsplit(Q2, " ")))
dic1 <- rem_eng(Q1)
dic2 <- rem_eng(Q2)
if (length(dic1) > length(dic2)) {Q <- dic1; dic1 <- dic2; dic2 <- Q}
len <- length(dic1) + length(dic2) - sum(dic1 %in% dic2)
same <- sum(dic1 %in% dic2)/len
return(c(L1, L2, same))
}
apply(as.matrix(c(1:3)), 1, f)
apply(as.matrix(c(1:5)), 1, f)
t(apply(as.matrix(c(1:5)), 1, f))
i=2
{
Q1 <- T1$question1[i]
Q2 <- T1$question2[i]
Q1Tag <- tagPOS(Q1)
Q2Tag <- tagPOS(Q2)
Q1TV <- sapply(strsplit(Q1Tag$POStagged,"[[:punct:]]*/VB.?"),function(x) {res = sub("(^.*\\s)(\\w+$)", "\\2", x); res[!grepl("\\s",res)]} )
Q1TN <- sapply(strsplit(Q1Tag$POStagged,"[[:punct:]]*/NN.?"),function(x) {res = sub("(^.*\\s)(\\w+$)", "\\2", x); res[!grepl("\\s",res)]} )
Q2TV <- sapply(strsplit(Q2Tag$POStagged,"[[:punct:]]*/VB.?"),function(x) {res = sub("(^.*\\s)(\\w+$)", "\\2", x); res[!grepl("\\s",res)]} )
Q2TN <- sapply(strsplit(Q2Tag$POStagged,"[[:punct:]]*/NN.?"),function(x) {res = sub("(^.*\\s)(\\w+$)", "\\2", x); res[!grepl("\\s",res)]} )
print(rem_eng(Q1TV))
print(rem_eng(Q1TN))
print(rem_eng(Q2TV))
print(rem_eng(Q2TN))
}
length(rem_eng(Q1TV))
Q1TV
LV1 <- length(Q1TV)
LV1
a <- "[[:punct:]]*/VB.?"
c <- "VB"
b <- paste(c("[[:punct:]]*/",c,".?"), sep = "")
a
b
?paste
(nth <- paste0(1:12, c("st", "nd", "rd", rep("th", 9))))
b <- paste("[[:punct:]]*/",c,".?", sep = "")
b
Q1TV
Q1TV <-
Q1TN <- sapply(strsplit(Q1Tag$POStagged,"[[:punct:]]*/NN.?"),function(x) {res = sub("(^.*\\s)(\\w+$)", "\\2", x); res[!grepl("\\s",res)]} )
Q1TN
length(Q1TN)
Q2TV <- sapply(strsplit(Q2Tag$POStagged,"[[:punct:]]*/VB.?"),function(x) {res = sub("(^.*\\s)(\\w+$)", "\\2", x); res[!grepl("\\s",res)]} )
Q2TN <- sapply(strsplit(Q2Tag$POStagged,"[[:punct:]]*/NN.?"),function(x) {res = sub("(^.*\\s)(\\w+$)", "\\2", x); res[!grepl("\\s",res)]} )
Q2TV
Q2TN
v_n <- function(input, v.n) {
output <- sapply(strsplit(input$POStagged, paste("[[:punct:]]*/", v.n, ".?", sep = "")),
function(x) {res = sub("(^.*\\s)(\\w+$)", "\\2", x); res[!grepl("\\s", res)]} )
return(output)
}
Q1TV <- v_n(Q1Tag, "VB")
Q1TV
Q1TN <- v_n(Q1Tag, "NN")
Q1TN
v_n.length <- function(input1, input2) {
Q1TV <- v_n(input1, "VB")
Q1TN <- v_n(input1, "NN")
Q2TV <- v_n(input2, "VB")
Q2TN <- v_n(input2, "NN")
LV1 <- length(Q1TV)
LV2 <- length(Q2TV)
LN1 <- length(Q1TN)
LN2 <- length(Q2TN)
Q1TV <- rem_eng(Q1TV)
Q2TV <- rem_eng(Q2TV)
Q1TN <- rem_eng(Q1TN)
Q2TN <- rem_eng(Q2TN)
LV.rem1 <- length(Q1TV)
LV.rem2 <- length(Q2TV)
LN.rem1 <- length(Q1TN)
LN.rem2 <- length(Q2TN)
if (LV.rem1 > LV.rem2) {Q <- Q1TV; Q1TV <- Q2TV; Q2TV <- Q}
if (LN.rem1 > LN.rem2) {Q <- Q1TN; Q1TN <- Q2TN; Q2TN <- Q}
len.V <- LV.rem1 + LV.rem2 - sum(Q1TV %in% Q2TV)
same.V <- sum(Q1TV %in% Q2TV)/len.V
len.N <- LN.rem1 + LN.rem2 - sum(Q1TN %in% Q2TN)
same.N <- sum(Q1TN %in% Q2TN)/len.N
return(c(LV1, LV2, LN1, LN2, LV.rem1, LV.rem2, LN.rem1, LN.rem2, same.V, same.N))
}
v_n.length(Q1Tag, Q2Tag)
Q1TV
Q1TN
Q2TV
Q2TN
f <- function(i) {
# input two questions
Q1 <- T1$question1[i]
Q2 <- T1$question2[i]
# number of words in each question
L1 <- length(unlist(strsplit(Q1, " ")))
L2 <- length(unlist(strsplit(Q2, " ")))
# ratio of length
ratio <- min(c(L1, L2)) / max(c(L1, L2))
# remove punctuation and stopwords
dic1 <- rem_eng(Q1)
dic2 <- rem_eng(Q2)
# percentage of same words between two questions
if (length(dic1) > length(dic2)) {Q <- dic1; dic1 <- dic2; dic2 <- Q}
len <- length(dic1) + length(dic2) - sum(dic1 %in% dic2)
same <- sum(dic1 %in% dic2)/len
# extract verb and noun in each question
Q1Tag <- tagPOS(Q1)
Q2Tag <- tagPOS(Q2)
v_n.result <- v_n.length(Q1Tag, Q2Tag)
return(c(L1, L2, same, ratio, v_n.result))
}
i=1
f(1)
f(2)
dic1 <- rem_eng(Q1)
dic1
f <- function(i) {
# input two questions
Q1 <- T1$question1[i]
Q2 <- T1$question2[i]
# number of words in each question
L1 <- length(unlist(strsplit(Q1, " ")))
L2 <- length(unlist(strsplit(Q2, " ")))
# ratio of length
ratio <- min(c(L1, L2)) / max(c(L1, L2))
# remove punctuation and stopwords
dic1 <- rem_eng(Q1)
dic2 <- rem_eng(Q2)
L.rem1 <- length(dic1)
L.rem2 <- length(dic2)
# percentage of same words between two questions
if (length(dic1) > length(dic2)) {Q <- dic1; dic1 <- dic2; dic2 <- Q}
len <- length(dic1) + length(dic2) - sum(dic1 %in% dic2)
same <- sum(dic1 %in% dic2)/len
# extract verb and noun in each question
Q1Tag <- tagPOS(Q1)
Q2Tag <- tagPOS(Q2)
v_n.result <- v_n.length(Q1Tag, Q2Tag)
return(c(L1, L2, L.rem1, L.rem2, same, ratio, v_n.result))
}
i=1
f <- function(i) {
# input two questions
Q1 <- T1$question1[i]
Q2 <- T1$question2[i]
# number of words in each question
L1 <- length(unlist(strsplit(Q1, " ")))
L2 <- length(unlist(strsplit(Q2, " ")))
# ratio of length
ratio <- min(c(L1, L2)) / max(c(L1, L2))
# remove punctuation and stopwords
dic1 <- rem_eng(Q1)
dic2 <- rem_eng(Q2)
L.rem1 <- length(dic1)
L.rem2 <- length(dic2)
# percentage of same words between two questions
if (length(dic1) > length(dic2)) {Q <- dic1; dic1 <- dic2; dic2 <- Q}
len <- length(dic1) + length(dic2) - sum(dic1 %in% dic2)
same <- sum(dic1 %in% dic2)/len
# extract verb and noun in each question
Q1Tag <- tagPOS(Q1)
Q2Tag <- tagPOS(Q2)
v_n.result <- v_n.length(Q1Tag, Q2Tag)
return(c(L1, L2, L.rem1, L.rem2, same, ratio, v_n.result))
}
S <- 50000
index <- 1:S
T1 <- train[index, ] # may need to change name
dec <- function(z) {
return(strsplit(z, split = " "))
}
rem_eng <- function(input) {
dic <- Corpus(VectorSource(input))
dic <- tm_map(dic, content_transformer(tolower))
dic <- tm_map(dic, removeWords, stopwords("english"))
dic <- tm_map(dic, removePunctuation)
dic <- lapply(dic, dec)
dic <- unlist(dic)
if ("" %in% dic) { dic <- dic[-which(dic == "")]}
return(dic)
}
v_n <- function(input, v.n) {
output <- sapply(strsplit(input$POStagged, paste("[[:punct:]]*/", v.n, ".?", sep = "")),
function(x) {res = sub("(^.*\\s)(\\w+$)", "\\2", x); res[!grepl("\\s", res)]} )
return(output)
}
v_n.length <- function(input1, input2) {
Q1TV <- v_n(input1, "VB")
Q1TN <- v_n(input1, "NN")
Q2TV <- v_n(input2, "VB")
Q2TN <- v_n(input2, "NN")
LV1 <- length(Q1TV)
LV2 <- length(Q2TV)
LN1 <- length(Q1TN)
LN2 <- length(Q2TN)
Q1TV <- rem_eng(Q1TV)
Q2TV <- rem_eng(Q2TV)
Q1TN <- rem_eng(Q1TN)
Q2TN <- rem_eng(Q2TN)
LV.rem1 <- length(Q1TV)
LV.rem2 <- length(Q2TV)
LN.rem1 <- length(Q1TN)
LN.rem2 <- length(Q2TN)
if (LV.rem1 > LV.rem2) {Q <- Q1TV; Q1TV <- Q2TV; Q2TV <- Q}
if (LN.rem1 > LN.rem2) {Q <- Q1TN; Q1TN <- Q2TN; Q2TN <- Q}
len.V <- LV.rem1 + LV.rem2 - sum(Q1TV %in% Q2TV)
same.V <- sum(Q1TV %in% Q2TV)/len.V
len.N <- LN.rem1 + LN.rem2 - sum(Q1TN %in% Q2TN)
same.N <- sum(Q1TN %in% Q2TN)/len.N
return(c(LV1, LV2, LN1, LN2, LV.rem1, LV.rem2, LN.rem1, LN.rem2, same.V, same.N))
}
f <- function(i) {
# input two questions
Q1 <- T1$question1[i]
Q2 <- T1$question2[i]
# number of words in each question
L1 <- length(unlist(strsplit(Q1, " ")))
L2 <- length(unlist(strsplit(Q2, " ")))
# ratio of length
ratio <- min(c(L1, L2)) / max(c(L1, L2))
# remove punctuation and stopwords
dic1 <- rem_eng(Q1)
dic2 <- rem_eng(Q2)
L.rem1 <- length(dic1)
L.rem2 <- length(dic2)
# percentage of same words between two questions
if (length(dic1) > length(dic2)) {Q <- dic1; dic1 <- dic2; dic2 <- Q}
len <- length(dic1) + length(dic2) - sum(dic1 %in% dic2)
same <- sum(dic1 %in% dic2)/len
# extract verb and noun in each question
Q1Tag <- tagPOS(Q1)
Q2Tag <- tagPOS(Q2)
v_n.result <- v_n.length(Q1Tag, Q2Tag)
return(c(L1, L2, L.rem1, L.rem2, same, ratio, v_n.result))
}
feature <- apply(as.matrix(c(1:S)), 1, f)
feature <- apply(as.matrix(c(1:10)), 1, f)
feature <- matrix(NA, nrow = S, ncol = 16)
feature[1,] <- f(1)
View(feature)
feature[2,] <- f(2)
View(feature)
for(i in 1:10) {
feature[i,] <- f(i)
}
View(feature)
i=8
f(8)
Q1 <- T1$question1[i]
Q2 <- T1$question2[i]
Q1Tag <- tagPOS(Q1)
Q2Tag <- tagPOS(Q2)
Q1TV <- v_n(input1, "VB")
function (x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE)
.Internal(strsplit(x, as.character(split), fixed, perl, useBytes))
input1 <- Q1TV
input2 <- Q2Tag
input1 <- Q1Tag
Q1TV <- v_n(input1, "VB")
Q1TN <- v_n(input1, "NN")
Q2TV <- v_n(input2, "VB")
Q2TN <- v_n(input2, "NN")
Q1TV
Q1TN
Q2TV
Q2TN
LV1 <- length(Q1TV)
LV1
Q1TV <- rem_eng(Q1TV)
Q2TV <- rem_eng(Q2TV)
Q1TN <- rem_eng(Q1TN)
Q2TN <- rem_eng(Q2TN)
Q1TV
Q2TV
Q1TN
Q2TN
f(9)
f(10)
output <- c(LV1, LV2, LN1, LN2, LV.rem1, LV.rem2, LN.rem1, LN.rem2, same.V, same.N)
Q1TV <- v_n(input1, "VB")
Q1TN <- v_n(input1, "NN")
Q2TV <- v_n(input2, "VB")
Q2TN <- v_n(input2, "NN")
LV1 <- length(Q1TV)
LV2 <- length(Q2TV)
LN1 <- length(Q1TN)
LN2 <- length(Q2TN)
Q1TV <- rem_eng(Q1TV)
Q2TV <- rem_eng(Q2TV)
Q1TN <- rem_eng(Q1TN)
Q2TN <- rem_eng(Q2TN)
LV.rem1 <- length(Q1TV)
LV.rem2 <- length(Q2TV)
LN.rem1 <- length(Q1TN)
LN.rem2 <- length(Q2TN)
if (LV.rem1 > LV.rem2) {Q <- Q1TV; Q1TV <- Q2TV; Q2TV <- Q}
if (LN.rem1 > LN.rem2) {Q <- Q1TN; Q1TN <- Q2TN; Q2TN <- Q}
len.V <- LV.rem1 + LV.rem2 - sum(Q1TV %in% Q2TV)
same.V <- sum(Q1TV %in% Q2TV)/len.V
len.N <- LN.rem1 + LN.rem2 - sum(Q1TN %in% Q2TN)
same.N <- sum(Q1TN %in% Q2TN)/len.N
output <- c(LV1, LV2, LN1, LN2, LV.rem1, LV.rem2, LN.rem1, LN.rem2, same.V, same.N)
is.na(output) == T
output[is.na(output) == T] <- 0
output
v_n.length <- function(input1, input2) {
Q1TV <- v_n(input1, "VB")
Q1TN <- v_n(input1, "NN")
Q2TV <- v_n(input2, "VB")
Q2TN <- v_n(input2, "NN")
LV1 <- length(Q1TV)
LV2 <- length(Q2TV)
LN1 <- length(Q1TN)
LN2 <- length(Q2TN)
Q1TV <- rem_eng(Q1TV)
Q2TV <- rem_eng(Q2TV)
Q1TN <- rem_eng(Q1TN)
Q2TN <- rem_eng(Q2TN)
LV.rem1 <- length(Q1TV)
LV.rem2 <- length(Q2TV)
LN.rem1 <- length(Q1TN)
LN.rem2 <- length(Q2TN)
if (LV.rem1 > LV.rem2) {Q <- Q1TV; Q1TV <- Q2TV; Q2TV <- Q}
if (LN.rem1 > LN.rem2) {Q <- Q1TN; Q1TN <- Q2TN; Q2TN <- Q}
len.V <- LV.rem1 + LV.rem2 - sum(Q1TV %in% Q2TV)
same.V <- sum(Q1TV %in% Q2TV)/len.V
len.N <- LN.rem1 + LN.rem2 - sum(Q1TN %in% Q2TN)
same.N <- sum(Q1TN %in% Q2TN)/len.N
output <- c(LV1, LV2, LN1, LN2, LV.rem1, LV.rem2, LN.rem1, LN.rem2, same.V, same.N)
output[is.na(output) == T] <- 0
return(output)
}
f <- function(i) {
# input two questions
Q1 <- T1$question1[i]
Q2 <- T1$question2[i]
# number of words in each question
L1 <- length(unlist(strsplit(Q1, " ")))
L2 <- length(unlist(strsplit(Q2, " ")))
# ratio of length
ratio <- min(c(L1, L2)) / max(c(L1, L2))
# remove punctuation and stopwords
dic1 <- rem_eng(Q1)
dic2 <- rem_eng(Q2)
L.rem1 <- length(dic1)
L.rem2 <- length(dic2)
# percentage of same words between two questions
if (length(dic1) > length(dic2)) {Q <- dic1; dic1 <- dic2; dic2 <- Q}
len <- length(dic1) + length(dic2) - sum(dic1 %in% dic2)
same <- sum(dic1 %in% dic2)/len
# extract verb and noun in each question
Q1Tag <- tagPOS(Q1)
Q2Tag <- tagPOS(Q2)
v_n.result <- v_n.length(Q1Tag, Q2Tag)
return(c(L1, L2, L.rem1, L.rem2, same, ratio, v_n.result))
}
for(i in 1:10) {
feature[i,] <- f(i)
}
feature <- t(apply(as.matrix(c(1:S)), 1, f))
feature <- t(apply(as.matrix(c(1:10)), 1, f))
feature <- t(apply(as.matrix(c(1:100)), 1, f))
for(i in 11:100) {
print(f(i))
}
f(16)
f(26)
f(27)
f(28)
for(i in 25:30) {
print(f(i))
}
f(28)
f(29)
f(30)
View(feature)
feature <- t(apply(as.matrix(c(1:30)), 1, f))
options(java.parameters = "-Xmx1024m")
library(XLConnect)
install.packages("XLConnect")
library(XLConnect)
library(XLConnectJars)
library(XLConnect)
options(java.parameters = "-Xmx1024m")
library(XLConnect)
feature <- t(apply(as.matrix(c(1:30)), 1, f))
